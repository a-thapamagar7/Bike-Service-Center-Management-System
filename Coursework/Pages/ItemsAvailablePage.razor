@page "/itemsavailable"
@using Coursework.Data
@using Coursework.Data.Model;
@using System.Text.Json
@inject NavigationManager NavManager

<h4>Available Items</h4>

<p>This component contains information of all the available items</p>

<table class="table">
	<thead>
		<tr>
			<th>Item</th>
			<th>Quantity Available <button @onclick="Sort">@sortButton</button></th>
			<th>Last taken out on</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var currentItem in itemList)
		{
			<tr>
				<td>@currentItem.ItemName</td>
				<td>@currentItem.QuantityAvailable</td>
				@if (currentItem.LastTaken != default(DateTime))
				{
					<td>@currentItem.LastTaken.ToLongDateString()</td>
				}
				else
				{
					<td></td>
				}
				<td>
					<span class="">
						<button @onclick="()=>{IncreaseItem(currentItem.ItemName);}">+</button>
						<button @onclick="()=>{DecreaseItem(currentItem.ItemName);}">-</button>
						<button @onclick="()=>{RemoveItem(currentItem.ItemName);}">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
								<path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
								<path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
							</svg>
						</button>
					</span>
				</td>
			</tr>
		}
	</tbody>
</table>
<button @onclick="Navigate">Edit items</button>

@code {
	private List<AvailableItems> itemList;
	private List<AvailableItems> sorted;
	private string validty;
	private string sortButton= "Sort";
	private bool ascending = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			itemList = Helper.GetAllAvailableItems();
			sorted = itemList;
		}
		catch 
		{
			validty = "The stored file does not exist";
		}
	}

	private void IncreaseItem(string item) 
	{
		itemList.Where(x => x.ItemName.ToUpper() == item.ToUpper()).ToList().ForEach(x => x.QuantityAvailable += 1);
		Helper.WriteToFile("AvailableItems.json", itemList);
	}

	private void DecreaseItem(string item)
	{
		itemList.Where(x => x.ItemName.ToUpper() == item.ToUpper()).ToList().ForEach(x => x.QuantityAvailable -= 1);
		Helper.WriteToFile("AvailableItems.json", itemList);
	}

	private void RemoveItem(string item)
	{
		for (int i = 0; i < itemList.Count; i++)
		{
			if (itemList[i].ItemName == item)
			{
				itemList.RemoveAt(i);
			}
		}
		Helper.WriteToFile("AvailableItems.json", itemList);
	}

	private void Navigate()
	{
		NavManager.NavigateTo("additems");
	}


	private void Sort()
	{
		if(!ascending)
		{
			sorted = Helper.SelectionSortAscending(itemList);
			sortButton = "Sort<-";
		}
		else
		{
			sorted = Helper.SelectionSortDescending(itemList);
			sortButton = "Sort->";
		}
		ascending = !ascending;
	}
	

}